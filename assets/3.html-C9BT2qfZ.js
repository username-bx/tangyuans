import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as s,o as a}from"./app-B5GtrtTh.js";const n={};function d(l,t){return a(),e("div",null,t[0]||(t[0]=[s(`<blockquote><p>面试题：composition api相比于option api有哪些优势？</p></blockquote><p>不同于reactivity api，composition api提供的函数很多是与组件深度绑定的，不能脱离组件而存在。</p><h1 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>setup</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 该函数在组件属性被赋值后立即执行，早于所有生命周期钩子函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // props 是一个对象，包含了所有的组件属性值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // context 是一个对象，提供了组件所需的上下文信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>context对象的成员</p><table><thead><tr><th>成员</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>attrs</td><td>对象</td><td>同<code>vue2</code>的<code>this.$attrs</code></td></tr><tr><td>slots</td><td>对象</td><td>同<code>vue2</code>的<code>this.$slots</code></td></tr><tr><td>emit</td><td>方法</td><td>同<code>vue2</code>的<code>this.$emit</code></td></tr></tbody></table><h1 id="生命周期函数" tabindex="-1"><a class="header-anchor" href="#生命周期函数"><span>生命周期函数</span></a></h1><table><thead><tr><th>vue2 option api</th><th>vue3 option api</th><th>vue 3 composition api</th></tr></thead><tbody><tr><td>beforeCreate</td><td>beforeCreate</td><td>不再需要，代码可直接置于setup中</td></tr><tr><td>created</td><td>created</td><td>不再需要，代码可直接置于setup中</td></tr><tr><td>beforeMount</td><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td><mark>改</mark> beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>destroyed</td><td><mark>改</mark>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>-</td><td><mark>新</mark>renderTracked</td><td>onRenderTracked</td></tr><tr><td>-</td><td><mark>新</mark>renderTriggered</td><td>onRenderTriggered</td></tr></tbody></table><p>新增钩子函数说明：</p><table><thead><tr><th>钩子函数</th><th>参数</th><th>执行时机</th></tr></thead><tbody><tr><td>renderTracked</td><td>DebuggerEvent</td><td>渲染vdom收集到的每一次依赖时</td></tr><tr><td>renderTriggered</td><td>DebuggerEvent</td><td>某个依赖变化导致组件重新渲染时</td></tr></tbody></table><p>DebuggerEvent:</p><ul><li>target: 跟踪或触发渲染的对象</li><li>key: 跟踪或触发渲染的属性</li><li>type: 跟踪或触发渲染的方式</li></ul><h1 id="面试题参考答案" tabindex="-1"><a class="header-anchor" href="#面试题参考答案"><span>面试题参考答案</span></a></h1><p>面试题：composition api相比于option api有哪些优势？</p><blockquote><p>从两个方面回答：</p><ol><li>为了更好的逻辑复用和代码组织</li><li>更好的类型推导</li></ol></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>有了composition api，配合reactivity api，可以在组件内部进行更加细粒度的控制，使得组件中不同的功能高度聚合，提升了代码的可维护性。对于不同组件的相同功能，也能够更好的复用。</span></span>
<span class="line"><span>相比于option api，composition api中没有了指向奇怪的this，所有的api变得更加函数式，这有利于和类型推断系统比如TS深度配合。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const p=i(n,[["render",d]]),h=JSON.parse('{"path":"/vue3/3.html","title":"composition","lang":"zh-CN","frontmatter":{"title":"composition","shortTitle":"vue-3","image":"/assets/images/navicat.png","icon":"file-code","date":"2024-06-13T00:00:00.000Z","order":3,"tag":["vue composition"],"auther":"Tang Yuan","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"composition\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-23T09:09:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tang Yuan\\",\\"url\\":\\"\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/vue3/3.html"}],["meta",{"property":"og:site_name","content":"汤圆"}],["meta",{"property":"og:title","content":"composition"}],["meta",{"property":"og:description","content":"面试题：composition api相比于option api有哪些优势？ 不同于reactivity api，composition api提供的函数很多是与组件深度绑定的，不能脱离组件而存在。 setup context对象的成员 生命周期函数 新增钩子函数说明： DebuggerEvent: target: 跟踪或触发渲染的对象 key: 跟踪..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-23T09:09:53.000Z"}],["meta",{"property":"article:tag","content":"vue composition"}],["meta",{"property":"article:published_time","content":"2024-06-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-23T09:09:53.000Z"}],["meta",{"name":"keywords","content":"vue composition"}]],"description":"面试题：composition api相比于option api有哪些优势？ 不同于reactivity api，composition api提供的函数很多是与组件深度绑定的，不能脱离组件而存在。 setup context对象的成员 生命周期函数 新增钩子函数说明： DebuggerEvent: target: 跟踪或触发渲染的对象 key: 跟踪..."},"git":{"createdTime":1737623393000,"updatedTime":1737623393000,"contributors":[{"name":"benjamin","username":"benjamin","email":"benjamin@manka.co.jp","commits":1,"url":"https://github.com/benjamin"}]},"readingTime":{"minutes":1.71,"words":513},"filePathRelative":"vue3/3.md","excerpt":"<blockquote>\\n<p>面试题：composition api相比于option api有哪些优势？</p>\\n</blockquote>\\n<p>不同于reactivity api，composition api提供的函数很多是与组件深度绑定的，不能脱离组件而存在。</p>\\n<h1>setup</h1>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// component</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">export</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#C678DD\\"> default</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">  setup</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">props</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">context</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">){</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 该函数在组件属性被赋值后立即执行，早于所有生命周期钩子函数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // props 是一个对象，包含了所有的组件属性值</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // context 是一个对象，提供了组件所需的上下文信息</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,h as data};
