import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as e,o as n}from"./app-B3mNQgBJ.js";const t={};function l(p,i){return n(),s("div",null,i[0]||(i[0]=[e(`<h1 id="import-package-main" tabindex="-1"><a class="header-anchor" href="#import-package-main"><span>import package main</span></a></h1><h2 id="main-方法" tabindex="-1"><a class="header-anchor" href="#main-方法"><span>main 方法</span></a></h2><ol><li>任何一个类，都可以写一个静态的main方法,然后直接debug。（和前端不同）</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TypeCastingDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="package-classname" tabindex="-1"><a class="header-anchor" href="#package-classname"><span>package className</span></a></h2><blockquote><p>一个文件就是一个包</p></blockquote><ul><li>package 包名必须 和 文件夹名 相同</li><li>className 类名必须 和 文件名 相同</li></ul><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h2><p>import 包名.类名</p><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><p>一个文件只能有一个顶级类，也就是public修饰的类。</p>`,11)]))}const k=a(t,[["render",l]]),d=JSON.parse('{"path":"/java/3.html","title":"import package main","lang":"zh-CN","frontmatter":{"description":"import package main main 方法 任何一个类，都可以写一个静态的main方法,然后直接debug。（和前端不同） package className 一个文件就是一个包 package 包名必须 和 文件夹名 相同 className 类名必须 和 文件名 相同 import import 包名.类名 工具类 一个文件只能有一个顶...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"import package main\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-20T08:43:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tang Yuan\\",\\"url\\":\\"\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/3.html"}],["meta",{"property":"og:site_name","content":"汤圆"}],["meta",{"property":"og:title","content":"import package main"}],["meta",{"property":"og:description","content":"import package main main 方法 任何一个类，都可以写一个静态的main方法,然后直接debug。（和前端不同） package className 一个文件就是一个包 package 包名必须 和 文件夹名 相同 className 类名必须 和 文件名 相同 import import 包名.类名 工具类 一个文件只能有一个顶..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-20T08:43:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-20T08:43:54.000Z"}]]},"git":{"createdTime":1750409034000,"updatedTime":1750409034000,"contributors":[{"name":"Benjamin","username":"Benjamin","email":"benjaminma@example.com","commits":1,"url":"https://github.com/Benjamin"}]},"readingTime":{"minutes":0.36,"words":108},"filePathRelative":"java/3.md","excerpt":"\\n<h2>main 方法</h2>\\n<ol>\\n<li>任何一个类，都可以写一个静态的main方法,然后直接debug。（和前端不同）</li>\\n</ol>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-java\\"><span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> TypeCastingDemo</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> static</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> main</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">String</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[] </span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">args</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,d as data};
