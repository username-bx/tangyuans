import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as p,o as n}from"./app-DqPSM8rW.js";const r={};function o(a,e){return n(),i("div",null,e[0]||(e[0]=[p('<h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h1><h2 id="面向对象的-5-大原则" tabindex="-1"><a class="header-anchor" href="#面向对象的-5-大原则"><span>面向对象的 5 大原则</span></a></h2><p>面向对象的五大设计原则，简称 SOLID 原则，是由 Robert C. Martin（又称 Uncle Bob）提出的，是编写易维护、可扩展、可读性强的面向对象代码的重要指导思想。这五个原则分别是：</p><ol><li>S - 单一职责原则（Single Responsibility Principle，SRP）</li><li>O - 开闭原则（Open/Closed Principle，OCP）</li><li>L - 里氏替换原则（Liskov Substitution Principle，LSP）</li><li>I - 接口隔离原则（Interface Segregation Principle，ISP）</li><li>D - 依赖倒置原则（Dependency Inversion Principle，DIP）</li></ol><h2 id="面向对象的-3-大特性" tabindex="-1"><a class="header-anchor" href="#面向对象的-3-大特性"><span>面向对象的 3 大特性</span></a></h2><p>✅ 1. 封装（Encapsulation）<br> 定义：把数据（属性）和操作数据的方法（行为）包装在一起，对外隐藏内部实现细节，只暴露必要的接口。</p><p>目的：</p><p>隐藏实现细节，提高安全性</p><p>降低外部对类内部的依赖</p><p>提高模块的独立性和可维护性</p><p>关键词： private、public、getter/setter</p><p>例子：<br> 一个类的成员变量设置为私有（private），通过 getX() 和 setX() 访问。</p><p>✅ 2. 继承（Inheritance）<br> 定义：子类继承父类的属性和方法，实现代码复用。子类可以拥有自己的新属性或重写父类的方法。</p><p>目的：</p><p>实现代码复用</p><p>建立层次结构（&quot;是一个&quot; 的关系）</p><p>关键词： extends（Java）、:（Python/C++）</p><p>例子：<br> Student 类继承自 Person 类，自动拥有 Person 的属性和方法。</p><p>✅ 3. 多态（Polymorphism）<br> 定义：同一操作作用于不同对象时，可以表现出不同的行为。简单说：一个接口，多种实现。</p><p>目的：</p><p>提高程序的灵活性和可扩展性</p><p>便于使用抽象和接口进行编程</p><p>实现方式：</p><p>方法重载（Overloading）： 同一类中方法名相同，参数不同</p><p>方法重写（Overriding）： 子类重写父类的方法</p><p>接口/抽象类实现多态： 父类引用指向子类对象（如 Shape s = new Circle();）</p><p>✅ 4. 抽象（Abstraction）<br> 定义：提取对象的共性特征，忽略细节，只关注对象的外部特征和行为，而不是内部实现。</p><p>目的：</p><p>隐藏复杂性</p><p>提高可扩展性与可维护性</p><p>关键词： abstract、interface</p><p>例子：<br> 定义一个 Animal 抽象类，只声明 makeSound() 方法，由具体子类（如 Dog, Cat）实现具体行为。</p>',32)]))}const s=t(r,[["render",o]]),m=JSON.parse('{"path":"/java/6-oop.html","title":"面向对象","lang":"zh-CN","frontmatter":{"description":"面向对象 面向对象的 5 大原则 面向对象的五大设计原则，简称 SOLID 原则，是由 Robert C. Martin（又称 Uncle Bob）提出的，是编写易维护、可扩展、可读性强的面向对象代码的重要指导思想。这五个原则分别是： S - 单一职责原则（Single Responsibility Principle，SRP） O - 开闭原则（Op...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-20T08:43:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tang Yuan\\",\\"url\\":\\"\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/6-oop.html"}],["meta",{"property":"og:site_name","content":"汤圆"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"面向对象 面向对象的 5 大原则 面向对象的五大设计原则，简称 SOLID 原则，是由 Robert C. Martin（又称 Uncle Bob）提出的，是编写易维护、可扩展、可读性强的面向对象代码的重要指导思想。这五个原则分别是： S - 单一职责原则（Single Responsibility Principle，SRP） O - 开闭原则（Op..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-20T08:43:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-20T08:43:54.000Z"}]]},"git":{"createdTime":1750409034000,"updatedTime":1750409034000,"contributors":[{"name":"Benjamin","username":"Benjamin","email":"benjaminma@example.com","commits":1,"url":"https://github.com/Benjamin"}]},"readingTime":{"minutes":1.87,"words":562},"filePathRelative":"java/6-oop.md","excerpt":"\\n<h2>面向对象的 5 大原则</h2>\\n<p>面向对象的五大设计原则，简称 SOLID 原则，是由 Robert C. Martin（又称 Uncle Bob）提出的，是编写易维护、可扩展、可读性强的面向对象代码的重要指导思想。这五个原则分别是：</p>\\n<ol>\\n<li>S - 单一职责原则（Single Responsibility Principle，SRP）</li>\\n<li>O - 开闭原则（Open/Closed Principle，OCP）</li>\\n<li>L - 里氏替换原则（Liskov Substitution Principle，LSP）</li>\\n<li>I - 接口隔离原则（Interface Segregation Principle，ISP）</li>\\n<li>D - 依赖倒置原则（Dependency Inversion Principle，DIP）</li>\\n</ol>","autoDesc":true}');export{s as comp,m as data};
