import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-Dv4R8O3P.js";const t={};function l(h,i){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h2 id="📋-当前情况理解" tabindex="-1"><a class="header-anchor" href="#📋-当前情况理解"><span>📋 <strong>当前情况理解</strong></span></a></h2><h3 id="部署方式现状" tabindex="-1"><a class="header-anchor" href="#部署方式现状"><span><strong>部署方式现状：</strong></span></a></h3><p><strong>第一种部署方式：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">production</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接在服务器上运行</li><li>使用 <code>NODE_ENV=production</code></li><li>读取 <code>.env.production</code> 文件</li></ul><p><strong>第二种部署方式：</strong></p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-dockerfile"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> oven/bun:slim </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> base</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NODE_ENV=production  # ← 这里设置了production</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ... 你提供的完整Dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用Docker容器运行</li><li>Dockerfile中设置了 <code>ENV NODE_ENV=production</code></li><li>同样读取 <code>.env.production</code> 文件</li></ul><h2 id="❌-核心问题描述" tabindex="-1"><a class="header-anchor" href="#❌-核心问题描述"><span>❌ <strong>核心问题描述</strong></span></a></h2><p><strong>问题：两种部署方式都使用同一个环境配置</strong></p><ul><li>第一种部署（直接部署）和第二种部署（Docker）都设置了 <code>NODE_ENV=production</code></li><li>两种部署方式都会读取同一个 <code>.env.production</code> 文件</li><li><strong>但实际上你希望这两种部署方式使用不同的环境配置</strong></li></ul><p>我来详细解释 <code>bun run build</code> 的完整流程，特别是在你的双环境部署场景下：我来详细解释 <code>bun run build</code> 的完整流程，特别是在你的双环境场景下：</p><h2 id="🔄-核心流程" tabindex="-1"><a class="header-anchor" href="#🔄-核心流程"><span>🔄 <strong>核心流程</strong></span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>bun run build → 查找package.json → 执行next build → 读取next.config.js → 加载环境变量 → 编译构建</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="⚙️-关键时机-next-config-js-的执行" tabindex="-1"><a class="header-anchor" href="#⚙️-关键时机-next-config-js-的执行"><span>⚙️ <strong>关键时机：next.config.js 的执行</strong></span></a></h2><p><strong>当 <code>bun run build</code> 开始时：</strong></p><ol><li><strong>Next.js 立即读取并执行 next.config.js</strong></li><li><strong>这时候你的环境检测代码就运行了：</strong></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// next.config.js 在构建开始时执行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;🔍 Current APP_ENV:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">APP_ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">APP_ENV</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;staging&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dotenv&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.env.staging&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 加载测试环境变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dotenv&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.env.production&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 加载生产环境变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🌍-两种部署的环境变量状态" tabindex="-1"><a class="header-anchor" href="#🌍-两种部署的环境变量状态"><span>🌍 <strong>两种部署的环境变量状态</strong></span></a></h2><h3 id="第一种部署-bun直接" tabindex="-1"><a class="header-anchor" href="#第一种部署-bun直接"><span><strong>第一种部署（bun直接）：</strong></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">production</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>此时环境变量：</strong></p><ul><li><code>process.env.NODE_ENV = &#39;production&#39;</code> ✅</li><li><code>process.env.APP_ENV = undefined</code> ✅ (未设置)</li></ul><p><strong>执行结果：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;staging&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) → </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 走 else 分支 → 加载 .env.production</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种部署-docker" tabindex="-1"><a class="header-anchor" href="#第二种部署-docker"><span><strong>第二种部署（Docker）：</strong></span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-dockerfile"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NODE_ENV=production</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> APP_ENV=staging    # 这里设置的！</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bun run build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此时环境变量：</strong></p><ul><li><code>process.env.NODE_ENV = &#39;production&#39;</code> ✅</li><li><code>process.env.APP_ENV = &#39;staging&#39;</code> ✅ (Docker设置的)</li></ul><p><strong>执行结果：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;staging&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;staging&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) → </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 走 if 分支 → 加载 .env.staging</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-为什么在dockerfile中设置-env-app-env-staging" tabindex="-1"><a class="header-anchor" href="#🎯-为什么在dockerfile中设置-env-app-env-staging"><span>🎯 <strong>为什么在Dockerfile中设置 <code>ENV APP_ENV=staging</code>？</strong></span></a></h2><p><strong>就是为了让Docker构建时：</strong></p><ol><li><strong>next.config.js 能检测到 <code>APP_ENV=staging</code></strong></li><li><strong>从而加载 <code>.env.staging</code> 而不是 <code>.env.production</code></strong></li><li><strong>最终构建出使用测试环境配置的应用</strong></li></ol><h2 id="📁-构建结果的区别" tabindex="-1"><a class="header-anchor" href="#📁-构建结果的区别"><span>📁 <strong>构建结果的区别</strong></span></a></h2><p><strong>第一种部署构建后：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// .next/ 目录中的代码包含：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">NEXT_PUBLIC_API_URL</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://api.prod.example.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二种部署构建后：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// .next/ 目录中的代码包含：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">NEXT_PUBLIC_API_URL</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://api.staging.example.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="💡-关键理解" tabindex="-1"><a class="header-anchor" href="#💡-关键理解"><span>💡 <strong>关键理解</strong></span></a></h2><p><strong><code>ENV APP_ENV=staging</code> 的作用时机：</strong></p><ul><li>⏰ <strong>构建时</strong>（<code>bun run build</code> 执行期间）</li><li>📍 <strong>在 next.config.js 中被检测</strong></li><li>🎯 <strong>决定加载哪个环境配置文件</strong></li><li>🏗️ <strong>影响整个构建过程和最终产物</strong></li></ul><p><strong>简单来说：</strong> 这个环境变量就是告诉构建过程&quot;我现在是Docker部署，请使用测试环境的配置来构建应用&quot;！</p><p>这样理解了吗？这个环境变量是在<strong>构建时</strong>起作用的，不是运行时！</p>`,44)])])}const p=s(t,[["render",l]]),d=JSON.parse('{"path":"/software/51-nextjsEnv.html","title":"Nextjs 双环境部署完整思路","lang":"zh-CN","frontmatter":{"title":"Nextjs 双环境部署完整思路","shortTitle":"Nextjs 双环境部署","icon":"pen-to-square","date":"2025-10-10T00:00:00.000Z","star":true,"order":51,"category":["Nextjs"],"tag":["Nextjs"],"auther":"Tang Yuan","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nextjs 双环境部署完整思路\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-10T07:51:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tang Yuan\\",\\"url\\":\\"\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/software/51-nextjsEnv.html"}],["meta",{"property":"og:site_name","content":"汤圆"}],["meta",{"property":"og:title","content":"Nextjs 双环境部署完整思路"}],["meta",{"property":"og:description","content":"📋 当前情况理解 部署方式现状： 第一种部署方式： 直接在服务器上运行 使用 NODE_ENV=production 读取 .env.production 文件 第二种部署方式： 使用Docker容器运行 Dockerfile中设置了 ENV NODE_ENV=production 同样读取 .env.production 文件 ❌ 核心问题描述 问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T07:51:55.000Z"}],["meta",{"property":"article:tag","content":"Nextjs"}],["meta",{"property":"article:published_time","content":"2025-10-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-10T07:51:55.000Z"}],["meta",{"name":"keywords","content":"Nextjs"}]],"description":"📋 当前情况理解 部署方式现状： 第一种部署方式： 直接在服务器上运行 使用 NODE_ENV=production 读取 .env.production 文件 第二种部署方式： 使用Docker容器运行 Dockerfile中设置了 ENV NODE_ENV=production 同样读取 .env.production 文件 ❌ 核心问题描述 问..."},"git":{"createdTime":1760082715000,"updatedTime":1760082715000,"contributors":[{"name":"Benjamin","username":"Benjamin","email":"benjaminma@example.com","commits":1,"url":"https://github.com/Benjamin"}]},"readingTime":{"minutes":2.43,"words":729},"filePathRelative":"software/51-nextjsEnv.md","excerpt":"<h2>📋 <strong>当前情况理解</strong></h2>\\n<h3><strong>部署方式现状：</strong></h3>\\n<p><strong>第一种部署方式：</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-bash\\"><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">bun</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> i</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">NODE_ENV</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">production</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> bun</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> run</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> build</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,d as data};
